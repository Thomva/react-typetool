{"version":3,"sources":["app/components/Playground.jsx","app/pages/HomePage.jsx","app/App.js","app/routes/index.js","serviceWorker.js","index.js"],"names":["Playground","children","useState","text","setText","stepIntervalMS","setStepIntervalMS","replay","setReplay","blink","setBlink","blinkIntervalMS","setBlinkIntervalMS","showCaret","setShowCaret","loop","setLoop","loopIntervalMS","setLoopIntervalMS","replayHandler","useEffect","className","classes","onStart","useDefaultStyle","getCaretRef","ref","current","style","height","marginBottom","backgroundColor","htmlFor","type","name","id","defaultValue","onChange","e","target","value","defaultChecked","checked","onClick","HomePage","blinkCaret","setBlinkCaret","onFinish","App","basename","process","exact","path","component","from","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f58fd16.chunk.js","sourcesContent":["import { default as React, useState, useEffect, useReducer } from 'react';\r\nimport { Typer } from 'react-typetool';\r\n\r\nexport const Playground = ({ children }) => {\r\n  const [text, setText] = useState('Example');\r\n  // const [startStep, setStartStep] = useState(0);\r\n  const [stepIntervalMS, setStepIntervalMS] = useState(200);\r\n  const [replay, setReplay] = useState(false);\r\n  const [blink, setBlink] = useState(true);\r\n  const [blinkIntervalMS, setBlinkIntervalMS] = useState(500);\r\n  const [showCaret, setShowCaret] = useState(true);\r\n  const [loop, setLoop] = useState(false);\r\n  const [loopIntervalMS, setLoopIntervalMS] = useState(2000);\r\n\r\n  const replayHandler = () => {\r\n    setReplay(true);\r\n  };\r\n\r\n  const onStart = () => {\r\n    setReplay(false);\r\n  };\r\n\r\n  const styleRef = (ref) => {\r\n    ref.current.style.height = '40px';\r\n    // ref.current.style.width = '4px';\r\n    ref.current.style.marginBottom = '2px';\r\n    ref.current.style.backgroundColor = '#ffffff';\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!loop) return;\r\n    replayHandler();\r\n  }, [loop])\r\n\r\n  return (\r\n    <div className='playground'>\r\n      <div className='playground__preview'>\r\n        <Typer\r\n          text={text}\r\n          classes=\"playground__typer\"\r\n          replay={replay}\r\n          onStart={onStart}\r\n          useDefaultStyle={false}\r\n          stepIntervalMS={stepIntervalMS}\r\n          // startStep={startStep}\r\n          blink={blink}\r\n          blinkIntervalMS={blinkIntervalMS}\r\n          showCaret={showCaret}\r\n          loop={loop}\r\n          loopIntervalMS={loopIntervalMS}\r\n          getCaretRef={styleRef}\r\n        />\r\n      </div>\r\n\r\n      <div className='playground__variables'>\r\n        <div className='input__container'>\r\n          <label className='input__label' htmlFor='inputText'>\r\n            Text\r\n          </label>\r\n          <input\r\n            className='input__field'\r\n            type='text'\r\n            name='inputText'\r\n            id='inputText'\r\n            defaultValue={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className='input__container'>\r\n          <label className='input__label' htmlFor='inputStepIntervalMS'>\r\n            StepIntervalMS\r\n          </label>\r\n          <input\r\n            className='input__field'\r\n            type='number'\r\n            name='inputStepIntervalMS'\r\n            id='inputStepIntervalMS'\r\n            defaultValue={stepIntervalMS}\r\n            onChange={(e) => setStepIntervalMS(e.target.value)}\r\n          />\r\n        </div>\r\n        {/* \r\n        <div className='input__container'>\r\n          <label className='input__label' htmlFor='inputStartStep'>startStep</label>\r\n          <input\r\n          className='input__field'\r\n          type='number'\r\n          name='inputStartStep'\r\n          id='inputStartStep'\r\n          defaultValue={startStep}\r\n          onChange={(e) => setStartStep(e.target.value)}\r\n          />\r\n        </div> */}\r\n\r\n        <div className='input__container'>\r\n          <label className='input__label' htmlFor='inputBlink'>\r\n            Blink\r\n          </label>\r\n          <input\r\n            className='input__checkbox'\r\n            type='checkbox'\r\n            name='inputBlink'\r\n            id='inputBlink'\r\n            defaultChecked={blink}\r\n            onChange={(e) => setBlink(e.target.checked)}\r\n          />\r\n        </div>\r\n\r\n        <div className='input__container'>\r\n          <label className='input__label' htmlFor='inputBlinkIntervalMS'>\r\n            BlinkIntervalMS\r\n          </label>\r\n          <input\r\n            className='input__field'\r\n            type='number'\r\n            name='inputBlinkIntervalMS'\r\n            id='inputBlinkIntervalMS'\r\n            defaultValue={blinkIntervalMS}\r\n            onChange={(e) => setBlinkIntervalMS(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className='input__container'>\r\n          <label className='input__label' htmlFor='inputShowCaret'>\r\n            ShowCaret\r\n          </label>\r\n          <input\r\n            className='input__checkbox'\r\n            type='checkbox'\r\n            name='inputShowCaret'\r\n            id='inputShowCaret'\r\n            defaultChecked={showCaret}\r\n            onChange={(e) => setShowCaret(e.target.checked)}\r\n          />\r\n        </div>\r\n\r\n        <div className='input__container'>\r\n          <label className='input__label' htmlFor='inputLoop'>\r\n            Loop\r\n          </label>\r\n          <input\r\n            className='input__checkbox'\r\n            type='checkbox'\r\n            name='inputLoop'\r\n            id='inputLoop'\r\n            defaultChecked={loop}\r\n            onChange={(e) => setLoop(e.target.checked)}\r\n          />\r\n        </div>\r\n\r\n        <div className='input__container'>\r\n          <label className='input__label' htmlFor='inputLoopIntervalMS'>\r\n            LoopIntervalMS\r\n          </label>\r\n          <input\r\n            className='input__field'\r\n            type='number'\r\n            name='inputLoopIntervalMS'\r\n            id='inputLoopIntervalMS'\r\n            defaultValue={loopIntervalMS}\r\n            onChange={(e) => setLoopIntervalMS(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <button onClick={replayHandler}>Replay</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { default as React, useState } from 'react';\r\n// import { Typer, HorizontalScroll } from '../components';\r\nimport { Typer } from 'react-typetool';\r\nimport { Playground } from '../components';\r\n\r\nconst HomePage = ({ children }) => {\r\n  const [blinkCaret, setBlinkCaret] = useState(true);\r\n  const [showCaret, setShowCaret] = useState(true);\r\n\r\n  const onFinish = () => {\r\n    setBlinkCaret(false);\r\n    // setShowCaret(false);\r\n  }\r\n\r\n  // const styleRef = (ref) => {\r\n  //   ref.current.style.height = '40px';\r\n  //   ref.current.style.width = '4px';\r\n  //   ref.current.style.marginBottom = '2px';\r\n  // }\r\n\r\n  return (\r\n    <div className='page homePage'>\r\n      <div className='homePage__introContainer'>\r\n        {/* <Typer text='I am Typetool' onFinish={onFinish} blink={blinkCaret} showCaret={showCaret} getCaretRef={styleRef} /> */}\r\n        <Typer text='I am Typetool' classes=\"typer--intro\" onFinish={onFinish} blink={blinkCaret} showCaret={showCaret} useDefaultStyle={false} />\r\n      </div>\r\n\r\n      <div className=\"homePage__links\"></div>\r\n\r\n      <Playground />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import './app.scss';\n\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport * as Routes from './routes';\nimport { HomePage } from './pages';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path={Routes.LANDING} component={HomePage} />\n          <Redirect from={Routes.HOME} to={Routes.LANDING} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","export const LANDING = '/';\r\nexport const HOME = '/home';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}